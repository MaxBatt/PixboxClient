<?xml version="1.0" encoding="UTF-8"?>
<project
    name="MainActivity"
    default="help" >

    <property file="local.properties" />

    <property file="ant.properties" />

    <property environment="env" />

    <condition
        property="sdk.dir"
        value="${env.ANDROID_HOME}" >

        <isset property="env.ANDROID_HOME" />
    </condition>

    <loadproperties srcFile="project.properties" />

    <!-- quick check on sdk.dir -->

    <fail
        message="sdk.dir is missing. Make sure to generate local.properties using &apos;android update project&apos; or to inject it through the ANDROID_HOME environment variable."
        unless="sdk.dir" />

    <!--
    *
    * Set Variables
    *
    -->

    <property
        name="src.dir"
        value="src" />

    <property
        name="bin.dir"
        value="bin" />

    <property
        name="libs.dir"
        value="libs" />

    <property
        name="findbugs.home"
        value="/opt/findbugs" />

    <property
        name="checkstyle.home"
        value="/opt/checkstyle" />

    <property
        name="pmd.home"
        value="/opt/pmd" />

    <property
        name="config.dir"
        value="conf" />

    <property
        name="reports.dir"
        value="code-analysis-reports" />

    <property
        name="package.to.analyse"
        value="de.pixbox.client.*" />

    <property
        name="android.jar"
        value="${sdk.dir}/platforms/android-16/android.jar" />

    
    
    <!--
    *
    * Findbugs
    *
    -->
    
    <taskdef
        name="findbugs"
        classpath="${findbugs.home}/lib/findbugs-ant.jar"
        classname="edu.umd.cs.findbugs.anttask.FindBugsTask"
        description="classes+findbugs=magic" />

    <target name="findbugs" >
        <mkdir dir="${reports.dir}" />

        <findbugs
            home="${findbugs.home}"
            onlyAnalyze="${package.to.analyse}"
            output="xml"
            outputFile="${reports.dir}/findbugs-report.xml" >

            <sourcePath path="${src.dir}" />

            <class location="${bin.dir}" />

            <auxClasspath path="${android.jar}" /> 

            <auxClasspath path="${libs.dir}/android-async-http-1.4.3.jar" />

            <auxClasspath path="${libs.dir}/android-smart-image-view-1.0.0.jar" />

            <auxClasspath path="${libs.dir}/gson-2.2.2.jar" />

            <auxClasspath path="${libs.dir}/android-junit-report-1.5.8.jar" />

            <auxClasspath path="${libs.dir}/android-support-v4.jar" />
        </findbugs>
    </target>
    


    <!--
    *
    * Checkstyle
    *
    -->

    <target name="checkstyle" >

        <taskdef
            classpath="${checkstyle.home}/checkstyle-5.6-all.jar"
            resource="checkstyletask.properties" />

        <checkstyle
            config="${config.dir}/checkstyle-android.xml"
            failOnViolation="false" >

            <fileset
                dir="${src.dir}"
                includes="**/*.java" />

            <!-- Location of cache-file. Something that is project specific -->

            <property
                file="target/cachefile"
                key="checkstyle.cache.file" />
        </checkstyle>
    </target>

    <!--
    *
    * PMD
    *
    -->

    <path id="pmd.classpath" >

        <pathelement location="${build}" />

        <fileset dir="${pmd.home}/lib/" >

            <include name="*.jar" />
        </fileset>
    </path>

    <taskdef
        name="pmd"
        classname="net.sourceforge.pmd.ant.PMDTask"
        classpathref="pmd.classpath" />

    <target name="pmd" >

        <pmd rulesetfiles="java-imports,java-naming,java-android" >

            <formatter
                toFile="${reports.dir}/pmd-report.xml"
                type="xml" />

            <fileset dir="${src.dir}" >

                <include name="**/*.java" />
            </fileset>
        </pmd>
    </target>

    <!--
        Import per project custom build rules if present at the root of the project.
        This is the place to put custom intermediary targets such as:
            -pre-build
            -pre-compile
            -post-compile (This is typically used for code obfuscation.
                           Compiled code location: ${out.classes.absolute.dir}
                           If this is not done in place, override ${out.dex.input.absolute.dir})
            -post-package
            -post-build
            -pre-clean
    -->

    <import
        file="custom_rules.xml"
        optional="true" />

    <!--
         Import the actual build file.

         To customize existing targets, there are two options:
         - Customize only one target:
             - copy/paste the target into this file, *before* the
               <import> task.
             - customize it to your needs.
         - Customize the whole content of build.xml
             - copy/paste the content of the rules files (minus the top node)
               into this file, replacing the <import> task.
             - customize to your needs.

         ***********************
         ****** IMPORTANT ******
         ***********************
         In all cases you must update the value of version-tag below to read 'custom' instead of an integer,
         in order to avoid having your file be overridden by tools such as "android update project"
    -->
    <!-- version-tag: custom -->

    <import file="${sdk.dir}/tools/ant/build.xml" />

</project>