<?xml version="1.0" encoding="UTF-8"?>
<project
    name="MainActivityTest"
    default="help" >

    <!--
         The local.properties file is created and updated by the 'android' tool.
         It contains the path to the SDK. It should *NOT* be checked into
         Version Control Systems.
    -->

    <property file="local.properties" />

    <property file="ant.properties" />

    <!--
         if sdk.dir was not set from one of the property file, then
         get it from the ANDROID_HOME env var.
         This must be done before we load project.properties since
         the proguard config can use sdk.dir
    -->

    <property environment="env" />

    <condition
        property="sdk.dir"
        value="${env.ANDROID_HOME}" >

        <isset property="env.ANDROID_HOME" />
    </condition>

    <!--
         The project.properties file is created and updated by the 'android'
         tool, as well as ADT.

         This contains project specific properties such as project target, and library
         dependencies. Lower level build properties are stored in ant.properties
         (or in .classpath for Eclipse projects).

         This file is an integral part of the build system for your
         application and should be checked into Version Control Systems.
    -->

    <loadproperties srcFile="project.properties" />

    <!-- quick check on sdk.dir -->

    <fail
        message="sdk.dir is missing. Make sure to generate local.properties using &apos;android update project&apos; or to inject it through the ANDROID_HOME environment variable."
        unless="sdk.dir" />

    <target name="fetch-test-report" >

        <echo>
			Downloading JUnit test report from deviceâ€¦
        </echo>

        <mkdir dir="reports" />

        <exec
            executable="${adb}"
            failonerror="true" >

            <arg line="${adb.device.arg}" />

            <arg value="pull" />

            <arg value="/data/data/de.pixbox.client/files/junit-report.xml" />

            <arg value="reports/junit-report.xml" />
        </exec>
    </target>
    
    

      <property
          name="src-dir"
          value="src" /> <!-- change me -->

      <property
          name="bin-dir"
          value="bin" /> <!-- change me -->
		  

      <property
          name="findbugs.home"
          value="/opt/findbugs" /> <!-- change me -->

      <property
          name="android-jar"
          value="${sdk.dir}/platforms/android-16/android.jar" /> <!-- change me -->

      <property
          name="reports-folder"
          value="code-analysis-reports" /> <!-- change me -->

      <property
          name="package-to-analyse"
          value="de.pixbox.client.*" /> <!-- change me -->

      <path id="findbugs.dir.jars" >

          <fileset dir="${findbugs.home}/lib" >

              <include name="*.jar" />
          </fileset>
      </path>

      <taskdef
          name="findbugs"
          classname="edu.umd.cs.findbugs.anttask.FindBugsTask"
          description="classes+findbugs=magic" />

      <target name="findbugs" >
		  
		  <mkdir dir="${reports-folder}" />
		  
          <findbugs
              home="${findbugs.home}"
              onlyAnalyze="${package-to-analyse}"
              output="xml"
              outputFile="${reports-folder}/findbugs-report.xml" >

              <sourcePath path="${src-dir}" />

              <class location="${bin-dir}" />

              <auxClasspath path="${android-jar}" /> <!-- so we dont get hundrets of "The following classes needed for analysis were missing" warnings. -->
			  <auxClasspath path="libs/android-async-http-1.4.3.jar" />
			  <auxClasspath path="libs/android-smart-image-view-1.0.0.jar" />
			  <auxClasspath path="libs/gson-2.2.2.jar" />
			  <auxClasspath path="libs/android-junit-report-1.5.8.jar" />
			  <auxClasspath path="libs/android-support-v4.jar" />

          </findbugs>
      </target>
	
    
    
    
    <!--
        Import per project custom build rules if present at the root of the project.
        This is the place to put custom intermediary targets such as:
            -pre-build
            -pre-compile
            -post-compile (This is typically used for code obfuscation.
                           Compiled code location: ${out.classes.absolute.dir}
                           If this is not done in place, override ${out.dex.input.absolute.dir})
            -post-package
            -post-build
            -pre-clean
    -->

    <import
        file="custom_rules.xml"
        optional="true" />

    <!--
         Import the actual build file.

         To customize existing targets, there are two options:
         - Customize only one target:
             - copy/paste the target into this file, *before* the
               <import> task.
             - customize it to your needs.
         - Customize the whole content of build.xml
             - copy/paste the content of the rules files (minus the top node)
               into this file, replacing the <import> task.
             - customize to your needs.

         ***********************
         ****** IMPORTANT ******
         ***********************
         In all cases you must update the value of version-tag below to read 'custom' instead of an integer,
         in order to avoid having your file be overridden by tools such as "android update project"
    -->
    <!-- version-tag: 1 -->

    <import file="${sdk.dir}/tools/ant/build.xml" />

    <!-- Overriding test target to configure emma and junit reports -->

</project>